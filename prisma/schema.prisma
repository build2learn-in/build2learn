// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  username      String?        @unique
  bio           String?        @db.Text
  location      String?
  githubUrl     String?
  linkedinUrl   String?
  twitterUrl    String?
  websiteUrl    String?
  role          UserRole       @default(ATTENDEE)
  accounts      Account[]
  sessions      Session[]
  registrations Registration[]
  submissions   Submission[]
  skills        UserSkill[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model Event {
  id                 String         @id @default(cuid())
  title              String
  slug               String         @unique
  description        String         @db.Text
  eventDate          DateTime
  registrationDeadline DateTime
  location           String?
  maxParticipants    Int?
  status             EventStatus    @default(DRAFT)
  registrations      Registration[]
  submissions        Submission[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

enum RegistrationStatus {
  REGISTERED
  WAITLISTED
  APPROVED
  REJECTED
}

model Registration {
  id             String             @id @default(cuid())
  eventId        String
  userId         String
  ideaDescription String?           @db.Text
  participationType ParticipationType
  status         RegistrationStatus @default(REGISTERED)
  waitlistPosition Int?
  adminNotes     String?            @db.Text
  notificationSent Boolean          @default(false)
  event          Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@unique([eventId, userId])
}

model UserSkill {
  id        String   @id @default(cuid())
  userId    String
  skill     String
  level     SkillLevel
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, skill])
}

model Submission {
  id          String   @id @default(cuid())
  eventId     String
  userId      String
  projectName String
  projectUrl  String
  repoUrl     String?
  description String?   @db.Text
  techUsed    String[]
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  ADMIN
  ATTENDEE
}

enum EventStatus {
  DRAFT
  PUBLISHED
}

enum ParticipationType {
  HAS_IDEA
  NEEDS_HELP
  WANTS_TO_HELP
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}