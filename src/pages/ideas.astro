---
import EventLayout from '../layouts/EventLayout.astro';
import ideasData from '../content/ideas.json';

const projects = ideasData.projects;
const allTags = [...new Set(projects.flatMap((project: any) => project.tags))].sort();
const allTechStack = [...new Set(projects.flatMap((project: any) => project.tech_stack || []))].sort();
---

<EventLayout title="Build2Learn Idea List" description="Explore beginner-friendly project ideas from Build2Learn">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">Build2Learn Project Ideas</h1>
      <p class="text-xl text-gray-600 mb-8">Explore {projects.length} curated project ideas for first-time builders</p>
    </div>

    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4">
        <div class="md:col-span-2 lg:col-span-1 xl:col-span-2">
          <input
            type="text"
            id="searchInput"
            placeholder="Search projects by title, description, or problem solved..."
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <div>
          <select
            id="tagFilter"
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">All Tags</option>
            {allTags.map((tag: string) => (
              <option value={tag}>{tag}</option>
            ))}
          </select>
        </div>

        <div>
          <select
            id="techStackFilter"
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">All Tech</option>
            {allTechStack.map((tech: string) => (
              <option value={tech}>{tech}</option>
            ))}
          </select>
        </div>

        <div>
          <select
            id="statusFilter"
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="">All Status</option>
            <option value="Completed">Completed</option>
            <option value="WIP">Work in Progress</option>
            <option value="Planned">Planned</option>
          </select>
        </div>

        <div class="md:col-span-2 lg:col-span-3 xl:col-span-1 flex">
          <button
            id="clearFilters"
            class="w-full px-6 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
          >
            Clear
          </button>
        </div>
      </div>
    </div>

    <div class="mb-6">
      <p id="resultsCount" class="text-gray-600"></p>
    </div>

    <div id="projectsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {projects.map((project: any) => (
        <a
          href={`/ideas/${project.id}`}
          class="project-card block bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-all duration-200 hover:scale-[1.02] cursor-pointer"
          data-project={JSON.stringify(project)}
        >
          <!-- Status Badge -->
          <div class="flex justify-between items-start mb-3">
            <span class={`px-2 py-1 text-xs font-semibold rounded-full ${
              project.status === 'Completed' ? 'bg-green-100 text-green-800' :
              project.status === 'WIP' ? 'bg-yellow-100 text-yellow-800' :
              'bg-blue-100 text-blue-800'
            }`}>
              {project.status}
            </span>
            <span class="text-sm text-gray-500">#{project.id}</span>
          </div>

          <!-- Title & Description -->
          <h3 class="text-lg font-bold text-gray-900 mb-2 hover:text-blue-600 transition-colors">{project.title}</h3>
          <p class="text-gray-600 text-sm mb-3 line-clamp-3">{project.description}</p>

          <!-- Problem Solved -->
          <div class="mb-3">
            <h4 class="text-sm font-semibold text-gray-800 mb-1">Problem Solved:</h4>
            <p class="text-gray-600 text-xs line-clamp-2">{project.problem_solved}</p>
          </div>

          <!-- Features -->
          {project.features && project.features.length > 0 && (
            <div class="mb-3">
              <h4 class="text-sm font-semibold text-gray-800 mb-1">Key Features:</h4>
              <ul class="text-xs text-gray-600 list-disc list-inside">
                {project.features.slice(0, 2).map((feature: string) => (
                  <li class="line-clamp-1">{feature}</li>
                ))}
                {project.features.length > 2 && (
                  <li class="text-blue-600 font-medium">+{project.features.length - 2} more features</li>
                )}
              </ul>
            </div>
          )}

          <!-- Tech Stack -->
          {project.tech_stack && project.tech_stack.length > 0 && (
            <div class="mb-3">
              <h4 class="text-sm font-semibold text-gray-800 mb-1">Tech Stack:</h4>
              <div class="flex flex-wrap gap-1">
                {project.tech_stack.slice(0, 3).map((tech: string) => (
                  <span
                    class="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded cursor-pointer hover:bg-gray-200 transition-colors tech-filter"
                    data-tech={tech}
                    onclick="event.preventDefault(); event.stopPropagation(); document.getElementById('techStackFilter').value = this.getAttribute('data-tech'); filterProjects();"
                  >
                    {tech}
                  </span>
                ))}
                {project.tech_stack.length > 3 && (
                  <span class="px-2 py-1 bg-blue-50 text-blue-600 text-xs rounded font-medium">
                    +{project.tech_stack.length - 3}
                  </span>
                )}
              </div>
            </div>
          )}

          <!-- Tags -->
          <div class="flex flex-wrap gap-1 mt-auto">
            {project.tags.slice(0, 4).map((tag: string) => (
              <span
                class="px-2 py-1 bg-blue-50 text-blue-700 text-xs rounded-full cursor-pointer hover:bg-blue-100 transition-colors tag-filter"
                data-tag={tag}
                onclick="event.preventDefault(); event.stopPropagation(); document.getElementById('tagFilter').value = this.getAttribute('data-tag'); filterProjects();"
              >
                {tag}
              </span>
            ))}
            {project.tags.length > 4 && (
              <span class="px-2 py-1 bg-gray-50 text-gray-600 text-xs rounded-full">
                +{project.tags.length - 4}
              </span>
            )}
          </div>

          <!-- View Details Indicator -->
          <div class="mt-3 pt-3 border-t border-gray-100">
            <div class="flex items-center justify-between text-xs">
              <span class="text-gray-500">Click to view details</span>
              <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
            </div>
          </div>
        </a>
      ))}
    </div>

    <div id="noResults" class="hidden text-center py-12">
      <div class="text-gray-500">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        <h3 class="mt-2 text-sm font-medium text-gray-900">No projects found</h3>
        <p class="mt-1 text-sm text-gray-500">Try adjusting your search or filter criteria.</p>
      </div>
    </div>

    <div class="text-center mt-12 pt-8 border-t border-gray-200">
      <a
        href="/Build2Learn-Ideas.pdf"
        download
        class="inline-flex items-center px-4 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition-colors"
      >
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        Download PDF Version
      </a>
    </div>
  </div>

  <script>
    let allProjects: Array<{ element: HTMLElement; data: any }> = [];
    let filteredProjects: Array<{ element: HTMLElement; data: any }> = [];

    document.addEventListener('DOMContentLoaded', function() {
      const projectCards = document.querySelectorAll('.project-card');
      allProjects = Array.from(projectCards).map(card => ({
        element: card as HTMLElement,
        data: JSON.parse((card as HTMLElement).getAttribute('data-project') || '{}')
      }));

      filteredProjects = [...allProjects];
      updateDisplay();
      updateResultsCount();

      const searchInput = document.getElementById('searchInput');
      const tagFilter = document.getElementById('tagFilter');
      const techStackFilter = document.getElementById('techStackFilter');
      const statusFilter = document.getElementById('statusFilter');
      const clearFiltersBtn = document.getElementById('clearFilters');

      if (searchInput) searchInput.addEventListener('input', filterProjects);
      if (tagFilter) tagFilter.addEventListener('change', filterProjects);
      if (techStackFilter) techStackFilter.addEventListener('change', filterProjects);
      if (statusFilter) statusFilter.addEventListener('change', filterProjects);
      if (clearFiltersBtn) clearFiltersBtn.addEventListener('click', clearFilters);

     
    });

    function filterProjects() {
      const searchInput = document.getElementById('searchInput') as HTMLInputElement;
      const tagFilter = document.getElementById('tagFilter') as HTMLSelectElement;
      const techStackFilter = document.getElementById('techStackFilter') as HTMLSelectElement;
      const statusFilter = document.getElementById('statusFilter') as HTMLSelectElement;

      const searchTerm = searchInput?.value.toLowerCase() || '';
      const selectedTag = tagFilter?.value || '';
      const selectedTechStack = techStackFilter?.value || '';
      const selectedStatus = statusFilter?.value || '';

      filteredProjects = allProjects.filter(project => {
        const data = project.data;

        const matchesSearch = !searchTerm ||
          data.title.toLowerCase().includes(searchTerm) ||
          data.description.toLowerCase().includes(searchTerm) ||
          data.problem_solved.toLowerCase().includes(searchTerm) ||
          (data.features && data.features.some((f: string) => f.toLowerCase().includes(searchTerm))) ||
          (data.tech_stack && data.tech_stack.some((t: string) => t.toLowerCase().includes(searchTerm)));

        const matchesTag = !selectedTag || data.tags.includes(selectedTag);

        const matchesTechStack = !selectedTechStack || (data.tech_stack && data.tech_stack.includes(selectedTechStack));

        const matchesStatus = !selectedStatus || data.status === selectedStatus;

        return matchesSearch && matchesTag && matchesTechStack && matchesStatus;
      });

      updateDisplay();
      updateResultsCount();
    }

    function updateDisplay() {
      const noResults = document.getElementById('noResults');

      allProjects.forEach(project => {
        project.element.style.display = 'none';
      });

      if (filteredProjects.length === 0) {
        if (noResults) noResults.classList.remove('hidden');
      } else {
        if (noResults) noResults.classList.add('hidden');

        filteredProjects.forEach(project => {
          project.element.style.display = 'block';
        });
      }
    }

    function updateResultsCount() {
      const count = filteredProjects.length;
      const total = allProjects.length;
      const resultsCount = document.getElementById('resultsCount');
      if (resultsCount) {
        resultsCount.textContent = `Showing ${count} of ${total} projects`;
      }
    }

    function clearFilters() {
      const searchInput = document.getElementById('searchInput') as HTMLInputElement;
      const tagFilter = document.getElementById('tagFilter') as HTMLSelectElement;
      const techStackFilter = document.getElementById('techStackFilter') as HTMLSelectElement;
      const statusFilter = document.getElementById('statusFilter') as HTMLSelectElement;

      if (searchInput) searchInput.value = '';
      if (tagFilter) tagFilter.value = '';
      if (techStackFilter) techStackFilter.value = '';
      if (statusFilter) statusFilter.value = '';
      filterProjects();
    }
  </script>

  <style>
    .line-clamp-1 {
      display: -webkit-box;
      -webkit-line-clamp: 1;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  </style>
</EventLayout>
